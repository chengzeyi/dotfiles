[ -f ~/.pre_bashrc.sh ] && source ~/.pre_bashrc.sh

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=20000

export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# In recent versions of bash the 'globstar' shell option is disabled by default. Enabled via:
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

bind 'set show-all-if-ambiguous on'
bind 'set completion-ignore-case on'
bind 'set menu-complete-display-prefix on'
bind 'TAB:menu-complete'
bind '"\e[Z": menu-complete-backward'

# Get the content of /proc/version
PROC_VERSION=$(cat /proc/version)

# Check if we are running within WSL
if echo $PROC_VERSION | grep -qi 'Microsoft'; then
  # Check if it's WSL1 or WSL2
  if echo $PROC_VERSION | grep -qi 'WSL2'; then
    WSL_VERSION="WSL2"
  else
    WSL_VERSION="WSL1"
  fi
else
  WSL_VERSION="Linux"
fi

export HOST_IP="127.0.0.1"
if [ "$WSL_VERSION" = "WSL2" ]; then
  # Get the IP address of the Windows host
  export HOST_IP=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}')
  export LD_LIBRARY_PATH=/usr/lib/wsl/lib:$LD_LIBRARY_PATH
  export LIBRARY_PATH=/usr/lib/wsl/lib:$LIBRARY_PATH

  export WAYLAND_DISPLAY=
fi

alias proxy="export HTTP_PROXY=http://$HOST_IP:7890 \
    HTTPS_PROXY=http://$HOST_IP:7890 \
    FTP_PROXY=http://$HOST_IP:7890 \
    ALL_PROXY=http://$HOST_IP:7890 \
    http_proxy=http://$HOST_IP:7890 \
    https_proxy=http://$HOST_IP:7890 \
    ftp_proxy=http://$HOST_IP:7890 \
    all_proxy=http://$HOST_IP:7890"

alias unproxy="export HTTP_PROXY= \
    HTTPS_PROXY= \
    FTP_PROXY= \
    ALL_PROXY= \
    http_proxy= \
    https_proxy= \
    ftp_proxy= \
    all_proxy="

if [ -d /usr/local/cuda ]; then
    export PATH=/usr/local/cuda/bin:$PATH
    export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
    export CUDA_HOME=/usr/local/cuda
    export CUDA_PATH=/usr/local/cuda
    export CUDA_BIN_PATH=/usr/local/cuda
    export CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda
    export CUDACXX=/usr/local/cuda/bin/nvcc
fi

[ -d ~/.cargo/bin ] && export PATH=~/.cargo/bin:$PATH
[ -d ~/.local/bin ] && export PATH=~/.local/bin:$PATH
[ -d ~/.local/sbin ] && export PATH=~/.local/sbin:$PATH

[ -d ~/.local/lib ] && export LD_LIBRARY_PATH=~/.local/lib:~/lib:$LD_LIBRARY_PATH

[ -d ~/bin ] && export PATH=~/bin:$PATH
[ -d ~/sbin ] && export PATH=~/sbin:$PATH

# MANPATH=$MANPATH:/opt/nvidia/hpc_sdk/Linux_x86_64/23.9/compilers/man; export MANPATH
# PATH=/opt/nvidia/hpc_sdk/Linux_x86_64/23.9/compilers/bin:$PATH; export PATH

# export PATH=/opt/nvidia/hpc_sdk/Linux_x86_64/23.9/comm_libs/mpi/bin:$PATH
# export MANPATH=$MANPATH:/opt/nvidia/hpc_sdk/Linux_x86_64/23.9/comm_libs/mpi/man

export GIT_CURL_VERBOSE=1
export BAT_THEME="TwoDark"

if type nvim &>/dev/null && [[ -z "$VIM" || "$VIM" != *"/vim" ]]; then
    export VISUAL="nvim" EDITOR="nvim"
    export MANPAGER="nvim +Man!"
else
    export VISUAL="vim" EDITOR="vim"
    export MANPAGER="vim -M +MANPAGER -"
fi
export MANWIDTH=999

[ -x /home/linuxbrew/.linuxbrew/bin/jump ] && eval "$(jump shell)"

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

pyvenv () {
    if [ -z "$1" ]; then
        echo "Usage: pyvenv <name>"
        return 1
    fi
    [ -f ~/pyvenv/$1/bin/activate ] && source ~/pyvenv/$1/bin/activate && export PYVENVNAME=$1
}

export PYVENVNAME="${PYVENVNAME:-default}"
pyvenv $PYVENVNAME

[ -f ~/.inshellisense/key-bindings.bash ] && source ~/.inshellisense/key-bindings.bash

command -v fzf &> /dev/null && alias f="fzf --bind '?:toggle-preview' --preview-window=up:60% --preview '([[ -f {} ]] && (bat --style=numbers --color=always {} || cat {})) || ([[ -d {} ]] && (tree -C {} | less)) || echo {} 2> /dev/null | head -200'"

command -v github-copilot-cli &> /dev/null && eval "$(github-copilot-cli alias -- "$0")"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

export PATH=/usr/NX/scripts/vgl:$PATH
export VGL_DISPLAY=egl

# Start ssh-agent if it's not already running
if [ -z "$SSH_AUTH_SOCK" ] && command -v ssh-agent &> /dev/null; then
    eval $(ssh-agent -s) > /dev/null

    # if command -v ssh-add &> /dev/null; then
    #     # Add all private keys in the .ssh directory to the agent, excluding public keys
    #     for key in ~/.ssh/id_*; do
    #         if [[ -f "$key" && "$key" != *.pub ]]; then
    #         	ssh-add "$key" 2>/dev/null
    #         fi
    #     done
    # fi
fi

alias fixssh='eval $(tmux showenv -s SSH_AUTH_SOCK)'

[ -f ~/.post_bashrc.sh ] && source ~/.post_bashrc.sh
